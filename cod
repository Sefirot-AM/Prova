import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Scarica i dati storici di un titolo (ad es. Apple)
ticker = 'AAPL'
data = yf.download(ticker, start='2010-01-01', end='2020-01-01')

# Calcola il momentum su un periodo di 12 mesi (252 giorni lavorativi)
data['Momentum_12M'] = data['Adj Close'].pct_change(52)

# Definisci i segnali di acquisto e vendita
data['Signal'] = np.where(data['Momentum_12M'] > 0, 1, 0)  # Compra se il momentum è positivo
data['Signal'] = np.where(data['Momentum_12M'] < 0, -1, data['Signal'])  # Vendi se il momentum è negativo

# Calcola i ritorni giornalieri e i ritorni della strategia
data['Returns'] = data['Adj Close'].pct_change()
data['Strategy_Returns'] = data['Signal'].shift(1) * data['Returns']  # Shift per evitare il lookahead bias

# Calcola il capitale cumulativo (partendo da 1 unità)
data['Cumulative_Market_Returns'] = (1 + data['Returns']).cumprod()
data['Cumulative_Strategy_Returns'] = (1 + data['Strategy_Returns']).cumprod()

# Mostra i risultati
plt.figure(figsize=(10,6))
plt.plot(data['Cumulative_Market_Returns'], label='Market Returns (Buy & Hold)', color='blue')
plt.plot(data['Cumulative_Strategy_Returns'], label='Momentum Strategy Returns', color='red')
plt.title(f'{ticker} Momentum Strategy vs Buy & Hold')
plt.legend()
plt.show()

# Stampa la performance finale
print(f"Performance della strategia: {data['Cumulative_Strategy_Returns'].iloc[-1]:.2f}")
print(f"Performance del mercato: {data['Cumulative_Market_Returns'].iloc[-1]:.2f}")
